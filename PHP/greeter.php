<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: greeter.proto
//   Date: 2016-10-30 22:36:05

namespace test {

  class HelloRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'test.HelloRequest');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \test\HelloRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \test\HelloRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace test {

  class HelloReply extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $greeting = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'test.HelloReply');

      // REQUIRED STRING greeting = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "greeting";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <greeting> has a value
     *
     * @return boolean
     */
    public function hasGreeting(){
      return $this->_has(1);
    }
    
    /**
     * Clear <greeting> value
     *
     * @return \test\HelloReply
     */
    public function clearGreeting(){
      return $this->_clear(1);
    }
    
    /**
     * Get <greeting> value
     *
     * @return string
     */
    public function getGreeting(){
      return $this->_get(1);
    }
    
    /**
     * Set <greeting> value
     *
     * @param string $value
     * @return \test\HelloReply
     */
    public function setGreeting( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace test {

  class GreeterClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param test\HelloRequest $input
     */
    public function SayHello(\test\HelloRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/test.Greeter/SayHello', $argument, '\test\HelloReply::deserialize', $metadata, $options);
    }
  }
}
